{"ast":null,"code":"var _jsxFileName = \"/Users/alyssa1/Desktop/project_me/ChartSGNTest/population-chart-app/src/ChartComponent.js\";\nimport React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { Typography, Box } from '@mui/material';\nimport ReactCountryFlag from 'react-country-flag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countryCodes = {\n  China: 'CN',\n  India: 'IN',\n  'United States': 'US',\n  Russia: 'RU',\n  Japan: 'JP',\n  Indonesia: 'ID',\n  Germany: 'DE',\n  Brazil: 'BR',\n  'United Kingdom': 'GB',\n  Italy: 'IT',\n  France: 'FR',\n  Bangladesh: 'BD'\n};\nconst generateColor = index => {\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#d0ed57', '#a4de6c', '#8dd1e1', '#ffbb28', '#d0ed57', '#8884d8'];\n  return colors[index % colors.length];\n};\nconst CustomYAxisTick = ({\n  x,\n  y,\n  payload\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${x},${y})`,\n    children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n      x: -50,\n      y: -10,\n      width: 80,\n      height: 20,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ReactCountryFlag, {\n          countryCode: countryCodes[payload.value],\n          svg: true,\n          style: {\n            width: '20px',\n            height: '15px',\n            marginRight: '5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: payload.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomYAxisTick;\nconst CustomLegend = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      m: 1,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: 10,\n        height: 10,\n        bgcolor: generateColor(index),\n        mr: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: entry.country\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_c2 = CustomLegend;\nconst ChartComponent = ({\n  data\n}) => {\n  // Sort data by population in descending order\n  const sortedData = [...data].sort((a, b) => b.population - a.population);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            layout: \"vertical\",\n            data: sortedData,\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              type: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              type: \"category\",\n              dataKey: \"country\",\n              tick: CustomYAxisTick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"population\",\n              children: sortedData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: generateColor(index)\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomLegend, {\n      data: sortedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_c3 = ChartComponent;\nexport default ChartComponent;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CustomYAxisTick\");\n$RefreshReg$(_c2, \"CustomLegend\");\n$RefreshReg$(_c3, \"ChartComponent\");","map":{"version":3,"names":["React","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Cell","Typography","Box","ReactCountryFlag","jsxDEV","_jsxDEV","countryCodes","China","India","Russia","Japan","Indonesia","Germany","Brazil","Italy","France","Bangladesh","generateColor","index","colors","length","CustomYAxisTick","x","y","payload","transform","children","width","height","style","display","alignItems","countryCode","value","svg","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","variant","_c","CustomLegend","data","justifyContent","flexWrap","map","entry","m","bgcolor","mr","country","_c2","ChartComponent","sortedData","sort","a","b","population","flex","layout","type","dataKey","tick","strokeDasharray","fill","_c3","$RefreshReg$"],"sources":["/Users/alyssa1/Desktop/project_me/ChartSGNTest/population-chart-app/src/ChartComponent.js"],"sourcesContent":["import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { Typography, Box } from '@mui/material';\nimport ReactCountryFlag from 'react-country-flag';\n\nconst countryCodes = {\n    China: 'CN',\n    India: 'IN',\n    'United States': 'US',\n    Russia: 'RU',\n    Japan: 'JP',\n    Indonesia: 'ID',\n    Germany: 'DE',\n    Brazil: 'BR',\n    'United Kingdom': 'GB',\n    Italy: 'IT',\n    France: 'FR',\n    Bangladesh: 'BD'\n};\n\nconst generateColor = (index) => {\n    const colors = [\n        '#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#d0ed57',\n        '#a4de6c', '#8dd1e1', '#ffbb28', '#d0ed57', '#8884d8'\n    ];\n    return colors[index % colors.length];\n};\n\nconst CustomYAxisTick = ({ x, y, payload }) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <foreignObject x={-50} y={-10} width={80} height={20}>\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <ReactCountryFlag \n                        countryCode={countryCodes[payload.value]} \n                        svg \n                        style={{\n                            width: '20px',\n                            height: '15px',\n                            marginRight: '5px',\n                        }} \n                    />\n                    <Typography variant=\"body2\">{payload.value}</Typography>\n                </div>\n            </foreignObject>\n        </g>\n    );\n};\n\nconst CustomLegend = ({ data }) => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\n            {data.map((entry, index) => (\n                <Box key={index} display=\"flex\" alignItems=\"center\" m={1}>\n                    <Box\n                        width={10}\n                        height={10}\n                        bgcolor={generateColor(index)}\n                        mr={1}\n                    />\n                    <Typography variant=\"body2\">{entry.country}</Typography>\n                </Box>\n            ))}\n        </Box>\n    );\n};\n\nconst ChartComponent = ({ data }) => {\n    // Sort data by population in descending order\n    const sortedData = [...data].sort((a, b) => b.population - a.population);\n\n    return (\n        <div>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ flex: 1 }}>\n                    <ResponsiveContainer width=\"100%\" height={400}>\n                        <BarChart layout=\"vertical\" data={sortedData}>\n                            <XAxis type=\"number\" />\n                            <YAxis \n                                type=\"category\" \n                                dataKey=\"country\"\n                                tick={CustomYAxisTick}\n                            />\n                            <Tooltip />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Bar dataKey=\"population\">\n                                {sortedData.map((entry, index) => (\n                                    <Cell key={`cell-${index}`} fill={generateColor(index)} />\n                                ))}\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            </div>\n            <CustomLegend data={sortedData} />\n        </div>\n    );\n};\n\nexport default ChartComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}