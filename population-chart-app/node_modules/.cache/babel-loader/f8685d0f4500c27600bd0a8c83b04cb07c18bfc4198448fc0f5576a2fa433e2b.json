{"ast":null,"code":"var _jsxFileName = \"/Users/alyssa1/Desktop/project_me/ChartSGNTest/population-chart-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ChartComponent from './ChartComponent';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Function to fetch data from the API\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/data');\n        setData(response.data);\n      } catch (error) {\n        console.error('Error fetching data: ', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const filterCountries = [\"China\", \"India\", \"United States\", \"Russia\", \"Japan\", \"Indonesia\", \"Germany\", \"Brazil\", \"United Kingdom\", \"Italy\", \"France\", \"Bangladesh\"];\n\n  // Map data to the desired format and filter by country\n  const mapData = data.filter(item => filterCountries.includes(item[\"Country name\"])).map(item => ({\n    country: item[\"Country name\"],\n    year: parseInt(item[\"Year\"]),\n    population: parseInt(item[\"Population\"])\n  }));\n  const uniqueYears = [...new Set(mapData.map(entry => entry.year))];\n  const charts = uniqueYears.map(year => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Population Growth per Country in \", year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChartComponent, {\n      data: mapData.filter(entry => entry.year === year)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, year, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Population Growth per Country, 1950 to 2021\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), charts]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ChartComponent","axios","jsxDEV","_jsxDEV","App","_s","data","setData","fetchData","response","get","error","console","filterCountries","mapData","filter","item","includes","map","country","year","parseInt","population","uniqueYears","Set","entry","charts","style","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/alyssa1/Desktop/project_me/ChartSGNTest/population-chart-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ChartComponent from './ChartComponent';\nimport axios from 'axios';\n\nfunction App() {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        // Function to fetch data from the API\n        const fetchData = async () => {\n            try {\n                const response = await axios.get('http://localhost:3001/data');\n                setData(response.data);\n            } catch (error) {\n                console.error('Error fetching data: ', error);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    const filterCountries = [\n        \"China\", \"India\", \"United States\", \"Russia\", \"Japan\",\n        \"Indonesia\", \"Germany\", \"Brazil\", \"United Kingdom\",\n        \"Italy\", \"France\", \"Bangladesh\"\n    ];\n\n    // Map data to the desired format and filter by country\n    const mapData = data\n        .filter(item => filterCountries.includes(item[\"Country name\"]))\n        .map(item => ({\n            country: item[\"Country name\"],\n            year: parseInt(item[\"Year\"]),\n            population: parseInt(item[\"Population\"])\n        }));\n\n    const uniqueYears = [...new Set(mapData.map(entry => entry.year))];\n    const charts = uniqueYears.map(year => (\n        <div key={year} style={{ marginBottom: '20px' }}>\n            <h2>Population Growth per Country in {year}</h2>\n            <ChartComponent data={mapData.filter(entry => entry.year === year)} />\n        </div>\n    ));\n\n    return (\n        <div className=\"App\">\n            <h1>Population Growth per Country, 1950 to 2021</h1>\n            {charts}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,4BAA4B,CAAC;QAC9DH,OAAO,CAACE,QAAQ,CAACH,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IAEDH,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,eAAe,GAAG,CACpB,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,OAAO,EACpD,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAClD,OAAO,EAAE,QAAQ,EAAE,YAAY,CAClC;;EAED;EACA,MAAMC,OAAO,GAAGR,IAAI,CACfS,MAAM,CAACC,IAAI,IAAIH,eAAe,CAACI,QAAQ,CAACD,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAC9DE,GAAG,CAACF,IAAI,KAAK;IACVG,OAAO,EAAEH,IAAI,CAAC,cAAc,CAAC;IAC7BI,IAAI,EAAEC,QAAQ,CAACL,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5BM,UAAU,EAAED,QAAQ,CAACL,IAAI,CAAC,YAAY,CAAC;EAC3C,CAAC,CAAC,CAAC;EAEP,MAAMO,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACV,OAAO,CAACI,GAAG,CAACO,KAAK,IAAIA,KAAK,CAACL,IAAI,CAAC,CAAC,CAAC;EAClE,MAAMM,MAAM,GAAGH,WAAW,CAACL,GAAG,CAACE,IAAI,iBAC/BjB,OAAA;IAAgBwB,KAAK,EAAE;MAAEC,YAAY,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC5C1B,OAAA;MAAA0B,QAAA,GAAI,mCAAiC,EAACT,IAAI;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChD9B,OAAA,CAACH,cAAc;MAACM,IAAI,EAAEQ,OAAO,CAACC,MAAM,CAACU,KAAK,IAAIA,KAAK,CAACL,IAAI,KAAKA,IAAI;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,GAFhEb,IAAI;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGT,CACR,CAAC;EAEF,oBACI9B,OAAA;IAAK+B,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAChB1B,OAAA;MAAA0B,QAAA,EAAI;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnDP,MAAM;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd;AAAC5B,EAAA,CA9CQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}